OS Machine Problem 4: MMU

Ran Pang



**********      Files Modified or Added to The Kernel Source Code    **********


	> Replace “linux/arch/x86/include/asm/unistd_64.h”.

	> In “linux/kernel/” add “MMU.c”.
	   
	> Replace “linux/kernel/Makefile”.


***********************             Notes              ************************


    1. In qume, do not mmap files in the floppy disk and write to it. This
       will likely cause error.



*******************             Test Programs             *********************
   

    test1: ./test1.o

       results in pde not present. Because virtual address 0 is reserved
       for NULL so the corresponding pte is not present.

    test2: ./test2.o <file path>

       In test2, after mmap() if we readMMU() before read or write from the
       virtual address returned by mmap() in the test program, the
       corresponding pte is not present. But after read from the virtual
       address from test program the pte is present, but write bit is not set.
       However if we write to the virtual address in the test program before
       readMMU(), pte's write bit is set.

       The reason might be that the kernel is using pure demand paging, so that
       kernel needs to catch a page fault in order to actually read something
       from the disk to physical memory and set the present bit of the 
       corresponding virtual page. This page fault can be generated by read 
       from or write into the virtual address in application.

       Why write bit is set only after test program write into the virtual
       memory is more confusing.

    test3: ./test3.o <file path 1> <file path 2>
       
       The print out of test3 is self-explainatory that writeMMU() works.







